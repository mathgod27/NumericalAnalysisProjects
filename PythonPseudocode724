import numpy as np

#initial guess
x = np.array([1.0, 1.0, 1.0])  # [x1, x2, x3]

#parameters
tol = 1e-6
max_iter = 20

for k in range(max_iter):
    x1, x2, x3 = x[0], x[1], x[2]

    #step 1: evaluate f(x)
    f1 = x1**2 + x2**2 + x3**2 - 3
    f2 = x1**2 + x2**2 - x3 - 1
    f3 = x1 + x2 - x3 - 3
    f = np.array([f1, f2, f3])

    #step 2: evaluate Jacobian J(x)
    J = np.array([
        [2*x1, 2*x2,  2*x3],
        [2*x1, 2*x2,  -1  ],
        [1,    1,    -1  ]
    ])

    #step 3: solve J * delta_x = -f
    delta_x = np.linalg.solve(J, -f)

    #step 4: update x
    x = x + delta_x

    #step 5: check convergence
    if np.linalg.norm(delta_x, ord=2) < tol:
        break

#print result
print("Approximate solution:", x)
